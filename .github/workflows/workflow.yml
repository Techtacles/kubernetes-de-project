name: 'Terraform'

on:
  push:
    branches: [ "master" ]


permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Export Terraform TFVARS file
      run: |
        echo "$TERRAFORM_VARIABLES" >> terraform.tfvars
      shell: bash
      env:
        TERRAFORM_VARIABLES: ${{ secrets.TERRAFORM_VARIABLES }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_WEB_IDENTITY_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="bucket=$TFSTATE_BUCKET" -upgrade
      env:
          TFSTATE_BUCKET: ${{ secrets.TFSTATE_BUCKET}}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    - name: Save TFState to file
      shell: bash
      run: terraform state pull > tfstate.tfstate
      
    - name: Save TFState to s3
      run: aws s3 cp tfstate.tfstate s3://$TFSTATE_BUCKET
      env:
          TFSTATE_BUCKET: ${{ secrets.TFSTATE_BUCKET}}
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -lock=false -var-file="terraform.tfvars"

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -lock=false -var-file="terraform.tfvars" -auto-approve 
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Deploy to ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ACCOUNT_NUMBER.dkr.ecr.us-east-1.amazonaws.com
        docker build -t $REPO_NAME -f webserver.dockerfile .
        docker tag $REPO_NAME:latest $ACCOUNT_NUMBER.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:latest
        docker push $ACCOUNT_NUMBER.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:latest
      env:
        ACCOUNT_NUMBER: ${{ secrets.ACCOUNT_NUMBER }}
        REPO_NAME: ${{ secrets.ECR_REPO_NAME }}

